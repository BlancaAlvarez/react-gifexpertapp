{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MA0CeA,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,uBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,UACI,6BAAMD,IACN,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCXlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUH,GAFtF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAGpB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAKA,QCJJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGtB,ECLwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkCA,OA3BAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GAEEX,QAAQC,IAAIU,GAEZH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAS1B,CAACtB,IASGuB,ED/B0BK,CAAa5B,GAAjCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEqBtBkB,EArCM,WAIjB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAUA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEIA,SAAWA,GADLA,YC1BlC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0369c0b6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Usualmente casi no se usan los props pero sino solo seria \r\n//const AddCategory = (props) => \r\n//props.setCategories\r\n//De esta forma es para desestructurar los datos\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            //Es un callback con el listado anterior\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    //Para prevenir el refresh completo se usa el handleSubmit\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>{ inputValue}</h1>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nexport const getGifs = async (category) => {\r\n    //Peticion atravez de un fetchapi en javascript\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=1bc31mVhHRiV4q2x4QeEo6jDKhytAKIs&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","//import React, { useState, useEffect } from 'react';\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //Para la desestructuracion se deja la variable de data pero al renombrarlo es data:images\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\"> Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} />\r\n                        //de esta manera {...img} se mandan las propiedades de una manera independiente\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //Se ejecuta esta instruccion cuando el componente es renderizado solo una vez\r\n    //se dispara el useEffect solo si la categoria cambia\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                    console.log(imgs);\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                \r\n            });\r\n\r\n        //Otra manera que podria ser y sea lo mismo es...\r\n        //getGifs(category)\r\n        //    .then(setImages);\r\n\r\n    }, [category]);\r\n\r\n    //setTimeout(() => {\r\n    //    setState({\r\n    //        data: [1, 2, 3, 4, 5, 6, 7],\r\n    //        loading: false\r\n    //    })\r\n    //}, 3000);\r\n\r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //const handledAdd = (e) => {\r\n        //setCategories([...categories, 'HunterXHunter']);\r\n\r\n        ////Si queremos que HunterXHunter sea al inicio es de la siguiente manera\r\n        ////setCategories(['HunterXHunter',...categories]);\r\n        ////setCategories(cats => [...cats, 'HunterXHunter']);\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            {/*<button onClick={handledAdd}>Agregar</button>*/}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        //Se quitan los () - {return <li key={category}> {category} </li>}\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}